-- FULL DATABASE SCRIPT FOR BACKBONE API
-- Compatible with Oracle Database 11g Enterprise Edition Release 11.2.0.4.0
-- Developer: Sheikh Asad Quadir

-- U_USERS Table (as specified in instruction.txt)
CREATE TABLE PRIOJON.U_USERS
(
  ID               INTEGER                      NOT NULL,
  USER_ID          VARCHAR2(30 CHAR)            NOT NULL,
  PASSWORD         VARCHAR2(30 CHAR),
  NAME             VARCHAR2(50 CHAR),
  STAFF_ID         VARCHAR2(30 CHAR),
  MOBILE           VARCHAR2(15 CHAR)            NOT NULL,
  EMAIL            VARCHAR2(30 CHAR),
  DIVITION_ID      VARCHAR2(30 CHAR)            NOT NULL,
  DISTRICT_ID      VARCHAR2(30 CHAR)            NOT NULL,
  THANA_ID         VARCHAR2(30 CHAR)            NOT NULL,
  ADDRESS          VARCHAR2(100 CHAR),
  NID              VARCHAR2(20 CHAR),
  USER_TYPE_ID     VARCHAR2(30 CHAR),
  USER_IMAGE_PATH  VARCHAR2(150 CHAR),
  FB_TOKEN         VARCHAR2(150 CHAR),
  APPROVE_STATUS   VARCHAR2(1 CHAR),
  APPROVE_BY       VARCHAR2(30 CHAR),
  CDT              DATE                         DEFAULT SYSDATE,
  UDT              DATE                         DEFAULT NULL,
  CDU              VARCHAR2(30 CHAR),
  UDU              VARCHAR2(30 CHAR),
  GROUP_ID         VARCHAR2(15 CHAR),
  ACT              NUMBER                       DEFAULT 1,
  BU_ID            VARCHAR2(15 CHAR)
);

-- Generic JWT Refresh Tokens Table
CREATE TABLE JWT_REFRESH_TOKENS (
    TOKEN_ID NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(30 CHAR) NOT NULL,
    TOKEN VARCHAR2(500 CHAR) NOT NULL UNIQUE,
    EXPIRATION_DATE DATE NOT NULL,
    CREATED_DATE DATE DEFAULT SYSDATE,
    IS_REVOKED NUMBER(1) DEFAULT 0,
    CONSTRAINT FK_REFRESH_TOKENS_USER 
        FOREIGN KEY (USER_ID) 
        REFERENCES PRIOJON.U_USERS(USER_ID)
);

-- Indexes for JWT_REFRESH_TOKENS
CREATE INDEX IDX_REFRESH_TOKENS_USER_ID ON JWT_REFRESH_TOKENS(USER_ID);
CREATE INDEX IDX_REFRESH_TOKENS_TOKEN ON JWT_REFRESH_TOKENS(TOKEN);
CREATE INDEX IDX_REFRESH_TOKENS_EXPIRATION ON JWT_REFRESH_TOKENS(EXPIRATION_DATE);

-- Sequence for JWT_REFRESH_TOKENS
CREATE SEQUENCE SEQ_REFRESH_TOKENS_ID
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- Trigger for JWT_REFRESH_TOKENS auto-increment
CREATE OR REPLACE TRIGGER TRG_REFRESH_TOKENS_ID
    BEFORE INSERT ON JWT_REFRESH_TOKENS
    FOR EACH ROW
BEGIN
    SELECT SEQ_REFRESH_TOKENS_ID.NEXTVAL INTO :NEW.TOKEN_ID FROM DUAL;
END;
/

-- Generic JWT Access Tokens Table (optional, for token blacklisting)
CREATE TABLE JWT_ACCESS_TOKENS (
    TOKEN_ID NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(30 CHAR) NOT NULL,
    TOKEN VARCHAR2(500 CHAR) NOT NULL UNIQUE,
    EXPIRATION_DATE DATE NOT NULL,
    CREATED_DATE DATE DEFAULT SYSDATE,
    IS_BLACKLISTED NUMBER(1) DEFAULT 0,
    CONSTRAINT FK_JWT_TOKENS_USER 
        FOREIGN KEY (USER_ID) 
        REFERENCES PRIOJON.U_USERS(USER_ID)
);

-- Indexes for JWT_ACCESS_TOKENS
CREATE INDEX IDX_JWT_TOKENS_USER_ID ON JWT_ACCESS_TOKENS(USER_ID);
CREATE INDEX IDX_JWT_TOKENS_TOKEN ON JWT_ACCESS_TOKENS(TOKEN);
CREATE INDEX IDX_JWT_TOKENS_EXPIRATION ON JWT_ACCESS_TOKENS(EXPIRATION_DATE);

-- Sequence for JWT_ACCESS_TOKENS
CREATE SEQUENCE SEQ_JWT_TOKENS_ID
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- Trigger for JWT_ACCESS_TOKENS auto-increment
CREATE OR REPLACE TRIGGER TRG_JWT_TOKENS_ID
    BEFORE INSERT ON JWT_ACCESS_TOKENS
    FOR EACH ROW
BEGIN
    SELECT SEQ_JWT_TOKENS_ID.NEXTVAL INTO :NEW.TOKEN_ID FROM DUAL;
END;
/

-- Sample table for CRUD operations demonstration
CREATE TABLE SAMPLE_DATA (
    ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(500),
    CREATED_DATE DATE DEFAULT SYSDATE,
    UPDATED_DATE DATE DEFAULT SYSDATE
);

-- Sequence for SAMPLE_DATA
CREATE SEQUENCE SEQ_SAMPLE_DATA_ID
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

-- Trigger for SAMPLE_DATA auto-increment
CREATE OR REPLACE TRIGGER TRG_SAMPLE_DATA_ID
    BEFORE INSERT ON SAMPLE_DATA
    FOR EACH ROW
BEGIN
    SELECT SEQ_SAMPLE_DATA_ID.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- Stored Procedure to INSERT data into SAMPLE_DATA
CREATE OR REPLACE PROCEDURE SP_INSERT_SAMPLE_DATA (
    p_name IN VARCHAR2,
    p_description IN VARCHAR2,
    p_id OUT NUMBER
)
AS
BEGIN
    INSERT INTO SAMPLE_DATA (NAME, DESCRIPTION)
    VALUES (p_name, p_description)
    RETURNING ID INTO p_id;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Stored Procedure to UPDATE data in SAMPLE_DATA
CREATE OR REPLACE PROCEDURE SP_UPDATE_SAMPLE_DATA (
    p_id IN NUMBER,
    p_name IN VARCHAR2,
    p_description IN VARCHAR2
)
AS
BEGIN
    UPDATE SAMPLE_DATA
    SET NAME = p_name,
        DESCRIPTION = p_description,
        UPDATED_DATE = SYSDATE
    WHERE ID = p_id;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Stored Procedure to DELETE data from SAMPLE_DATA
CREATE OR REPLACE PROCEDURE SP_DELETE_SAMPLE_DATA (
    p_id IN NUMBER
)
AS
BEGIN
    DELETE FROM SAMPLE_DATA
    WHERE ID = p_id;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Stored Procedure to SELECT all data from SAMPLE_DATA
CREATE OR REPLACE PROCEDURE SP_GET_ALL_SAMPLE_DATA (
    o_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN o_cursor FOR
        SELECT ID, NAME, DESCRIPTION, CREATED_DATE, UPDATED_DATE
        FROM SAMPLE_DATA
        ORDER BY ID;
END;
/

-- Stored Procedure to SELECT data by ID from SAMPLE_DATA
CREATE OR REPLACE PROCEDURE SP_GET_SAMPLE_DATA_BY_ID (
    p_id IN NUMBER,
    o_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN o_cursor FOR
        SELECT ID, NAME, DESCRIPTION, CREATED_DATE, UPDATED_DATE
        FROM SAMPLE_DATA
        WHERE ID = p_id;
END;
/